#+title: My xmonad 0.17 config
#+AUTHOR: Adeeb HS
#+STARTUP: showeverything
#+PROPERTY: header-args :tangle xmonad.hs

* Table of contents :toc:
- [[#imports][Imports]]
- [[#setting-up-variables-for-future-use][Setting up variables for future use]]
  - [[#the-preferred-terminal-program][The preferred terminal program]]
  - [[#whether-focus-follows-the-mouse-pointer][Whether focus follows the mouse pointer.]]
  - [[#width-of-the-window-border-in-pixels][Width of the window border in pixels.]]
  - [[#mod-key][Mod Key]]
  - [[#set-up-workspaces][Set up workspaces]]
  - [[#custom-variables][Custom variables]]
- [[#key-bindings][Key bindings]]
  - [[#basic-keybindings][Basic keybindings]]
  - [[#keybinding-to-switch-workspaces][Keybinding to switch workspaces]]
  - [[#keybinding-to-switch-physical-screens][Keybinding to switch physical screens]]
  - [[#mouse-bindings][Mouse bindings]]
- [[#layouts][Layouts:]]
  - [[#space-between-windows][Space between windows]]
  - [[#defining-a-smart-border][Defining a smart border]]
  - [[#the-layout-function-to-be-called-in-main][The layout function to be called in main]]
- [[#window-rules][Window rules:]]
- [[#event-handling][Event handling]]
- [[#log-hook][Log Hook]]
- [[#set-colours][Set colours]]
- [[#status-bars-and-logging][Status bars and logging]]
- [[#startup-hook][Startup hook]]
- [[#xmobar-config][Xmobar Config]]
  - [[#set-colours-for-xmobar][Set colours for xmobar]]
  - [[#xmobar-config-to-be-called-in-main][Xmobar config to be called in main]]
- [[#main-function][Main function]]
  - [[#a-structure-containing-configuration-settings-overriding-fields-in-the-default-config][A structure containing configuration settings overriding fields in the default config]]

* Imports
These are Haskell modules that we must import so that we can use their functions later in the config.
#+begin_src haskell
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Basic imports
import XMonad
import System.Exit

-- Actions
import XMonad.Actions.FloatSnap

-- Data Structures
import Data.Monoid
import qualified Data.Map as M

-- Data types
import qualified XMonad.StackSet as W

-- Hooks
import XMonad.Hooks.ManageDocks
import XMonad.Hooks.DynamicLog
import XMonad.Hooks.EwmhDesktops
import XMonad.Hooks.FadeInactive
import XMonad.Hooks.InsertPosition
import XMonad.Hooks.ManageHelpers
import XMonad.Hooks.StatusBar
import XMonad.Hooks.StatusBar.PP
import XMonad.Hooks.WindowSwallowing

-- Utils
import XMonad.Util.SpawnOnce
import XMonad.Util.Run
import XMonad.Util.Loggers
import XMonad.Util.EZConfig (additionalKeysP)
import XMonad.Util.Types ( Direction2D(U, D, L, R) )

-- Layouts
import XMonad.Layout.Grid
import XMonad.Layout.LayoutCombinators
import qualified XMonad.Layout.Magnifier as Mag
import XMonad.Layout.Simplest
import XMonad.Layout.SimplestFloat
import XMonad.Layout.Spiral
import XMonad.Layout.SubLayouts
import XMonad.Layout.Tabbed

-- Layout modifiers
import XMonad.Layout.Decoration
import XMonad.Layout.Groups
import XMonad.Layout.WindowNavigation
import XMonad.Layout.LayoutModifier
import XMonad.Layout.LimitWindows (limitWindows, increaseLimit, decreaseLimit)
import XMonad.Layout.NoBorders
import XMonad.Layout.Renamed
import XMonad.Layout.Spacing
import XMonad.Layout.ShowWName
import XMonad.Layout.TabBarDecoration
-- import XMonad.Layout.IfMax
-- import XMonad.Layout.NoFrillsDecoration

-- For polybar
import qualified XMonad.DBus as D
import qualified DBus.Client as DC
#+end_src

* Setting up variables for future use

** The preferred terminal program
#+begin_src haskell
myTerminal      = "kitty"
#+end_src

** Whether focus follows the mouse pointer.
#+begin_src haskell
myFocusFollowsMouse :: Bool
myFocusFollowsMouse = True
#+end_src

** Width of the window border in pixels.
#+begin_src haskell
myBorderWidth   = 0
#+end_src

** Mod Key
The ~modMask~ lets you specify which modkey you want to use. The default is mod1Mask ("left alt").  You may also consider using mod3Mask ("right alt"), which does not conflict with emacs keybindings. The "windows key" is usually mod4Mask.

#+begin_src haskell
myModMask       = mod4Mask
myModMask'       = mod3Mask
#+end_src

#+begin_src haskell
-- setting colors for tabs layout and tabs sublayout.
base03  = "#002b36"
base02  = "#073642"
base01  = "#586e75"
base00  = "#657b83"
base0   = "#839496"
base1   = "#93a1a1"
base2   = "#eee8d5"
base3   = "#fdf6e3"
active      = "#bd93f9"
myTabTheme = def
    {
     activeColor           = active
    , inactiveColor         = base02
    , activeBorderColor     = active
    , inactiveBorderColor   = base02
    , activeTextColor       = base03
    , inactiveTextColor     = base00
    }

myShowWNameTheme :: SWNConfig
myShowWNameTheme = def
  { swn_fade              = 1.0
  , swn_bgcolor           = "#1c1f24"
  , swn_color             = "#ffffff"
  }

#+end_src


** Set up workspaces
The default number of workspaces (virtual screens) and their names.
By default numeric strings is used, but any string may be used as a workspace name. The number of workspaces is determined by the length of this list.

#+begin_src haskell
myWorkspaces = ["Web", "Term", "Code", "Chat", "Vid" ] ++ map show [6..9]
#+end_src

*** Border colors for unfocused and focused windows, respectively
#+begin_src haskell
myNormalBorderColor  = "#ffffff"
myFocusedBorderColor = "#00ffff"
#+end_src

** Custom variables

#+begin_src haskell
myEmacs = "emacsclient -c -a 'emacs' "
myXmobar = "~/.config/xmonad/xmobar.hs"
myBar = myXmobar
myWallpapers = "~/.wallpapers"
topbar = 15
myBrowserClass = "Brave-browser"

topBarTheme = def
    {
     inactiveBorderColor   = base03
    , inactiveColor         = base03
    , inactiveTextColor     = base03
    , activeBorderColor     = active
    , activeColor           = active
    , activeTextColor       = active
    , urgentBorderColor     = red
    , urgentTextColor       = yellow
    , decoHeight            = topbar
    }
#+end_src

* Key bindings
Add, modify or remove key bindings here.
** Basic keybindings
#+begin_src haskell
myKeys :: [(String , X ())]
myKeys =
    -- launch a terminal
    [ ("M-S-<Return>", spawn myTerminal)

    -- launch dmenu
    , ("M-p", spawn "rofi -show drun")
    , ("M-o", spawn "rofi -show filebrowser")

    -- launch gmrun
    , ("M-S-p", spawn "gmrun")

    -- close focused window
    , ("M-S-c", kill)

     -- Rotate through the available layout algorithms
    , ("M-<Space>", sendMessage NextLayout)

    --  Reset the layouts on the current workspace to default
    -- , ("M-S-<Space>", setLayout $ XMonad.layoutHook XConfig)

    -- Jump to layouts
    , ("M-f" , sendMessage $ JumpToLayout "Full"     ) --Switch to the full layout
    , ("M-S-t" , sendMessage $ JumpToLayout "Tabbed"     ) --Switch to the tabbed layout
    , ("M-g" , sendMessage $ JumpToLayout "Grid"     ) --Switch to the grid layout

    -- Resize viewed windows to the correct size
    , ("M-n", refresh)

    -- Move focus to the next window
    , ("M-<Tab>", windows W.focusDown)

    -- Merging windows to subLayout groups
    , ("M-C-h", sendMessage $ pullGroup L)
    , ("M-C-l", sendMessage $ pullGroup R)
    , ("M-C-k", sendMessage $ pullGroup U)
    , ("M-C-j", sendMessage $ pullGroup D)

    , ("M-C-m", withFocused (sendMessage . MergeAll))
    , ("M-C-u", withFocused (sendMessage . UnMerge))

    , ("M-C-.", onGroup W.focusUp')
    , ("M-C-,", onGroup W.focusDown')

    -- Move focus to the next window
    , ("M-j", windows W.focusDown)

    -- Move focus to the previous window
    , ("M-k", windows W.focusUp  )

    -- Move focus to the master window
    , ("M-m", windows W.focusMaster  )

    -- Swap the focused window and the master window
    , ("M-<Return>", windows W.swapMaster)

    -- Swap the focused window with the next window
    , ("M-S-j", windows W.swapDown  )

    -- Swap the focused window with the previous window
    , ("M-S-k", windows W.swapUp    )

    -- Shrink the master area
    , ("M-h", sendMessage Shrink)

    -- Expand the master area
    , ("M-l", sendMessage Expand)

    -- Push window back into tiling
    , ("M-t", withFocused $ windows . W.sink)

    -- Increment the number of windows in the master area
    , ("M-,", sendMessage (IncMasterN 1))

    -- Deincrement the number of windows in the master area
    , ("M-.", sendMessage (IncMasterN (-1)))

    -- Toggle the status bar gap
    -- Use this binding with avoidStruts from Hooks.ManageDocks.
    -- See also the statusBar function from Hooks.DynamicLog.
    , ("M-S-b", sendMessage ToggleStruts)

    -- set wallpaper
    , ("M-b", spawn $ "feh --randomize --bg-scale " ++ myWallpapers ++ "/*")

    -- Quit xmonad
    , ("M-S-q", io (exitWith ExitSuccess))

    -- Restart xmonad
    , ("M-q", spawn "xmonad --recompile && ( xmonad --restart )")

    -- Open emacs
    , ("M-e e", spawn $ myEmacs ++ "-e '(dashboard-refresh-buffer)'")
    -- Restart emacs server
    , ("M-e r", spawn  "killall emacs && emacs --daemon && notify-send Emacs \"Server ready!\"")

    -- Lock screen
    , ("M-S-l", spawn  "betterlockscreen -l")

    -- Power menu
    , ("M-x", spawn  "oblogout")

    -- Increase Brightness
    , ("<XF86MonBrightnessUp>", spawn "~/.config/dunst/brightness/brightnessControl.sh up")

    -- Decrease Brightness
    , ("<XF86MonBrightnessDown>", spawn "~/.config/dunst/brightness/brightnessControl.sh down")

    -- Increase volume
    , ("<XF86AudioRaiseVolume>", spawn "~/.config/dunst/volume/volume.sh up")

    -- Decrease volume
    , ("<XF86AudioLowerVolume>", spawn "~/.config/dunst/volume/volume.sh down")

    -- Mute and unmute
    , ("<XF86AudioMute>", spawn "~/.config/dunst/volume/volume.sh toggle")

    -- Screenshot
    , ("<Print>", spawn "flameshot full")

    -- No borders
    --, ("M-S-n" SendMessage )
    ]
#+end_src

** Keybinding to switch workspaces
mod-[1..9], Switch to workspace N and mod-shift-[1..9], Move client to workspace N
#+begin_src haskell
    ++
    [("M-" ++ m ++ (show i), windows $ f $ myWorkspaces !! (i - 1))
        | i <- [1..9]
        , (f, m) <- [(W.greedyView, ""), (W.shift, "S-")]]
#+end_src

** Keybinding to switch physical screens
~mod-{w,e,r}~, Switch to physical/Xinerama screens 1, 2, or 3
~mod-shift-{w,e,r}~, Move client to screen 1, 2, or 3
#+begin_src haskell :tangle no
    ++
    [((m .|. modm, key), screenWorkspace sc >>= flip whenJust (windows . f))
        | (key, sc) <- zip [xK_w, xK_e, xK_r] [0..]
        , (f, m) <- [(W.view, 0), (W.shift, shiftMask)]]
#+end_src


** Mouse bindings
#+begin_src haskell
myMouseBindings XConfig {XMonad.modMask = modm} = M.fromList

    -- mod-button1, Set the window to floating mode and move by dragging
    -- [ ((modm, button1), (\w -> focus w >> mouseMoveWindow w
    --                                    >> windows W.shiftMaster))

    [ ((modm, button1), \w -> focus w >> mouseMoveWindow w
                                       >> afterDrag (snapMagicResize [L,R,U,D] (Just 50) (Just 50) w))

    -- mod-button2, Raise the window to the top of the stack
    , ((modm, button2), \w -> focus w >> windows W.shiftMaster)

    -- mod-button3, Set the window to floating mode and resize by dragging
    , ((modm, button3), \w -> focus w >> mouseResizeWindow w
                                       >> windows W.shiftMaster)

    -- you may also bind events to the mouse scroll wheel (button4 and button5)
    ]
#+end_src

* Layouts:
You can specify and transform your layouts by modifying these values.
Note that each layout is separated by |||, which denotes layout choice.
** Space between windows
Makes setting the spacingRaw simpler to write. The spacingRaw module adds a configurable amount of space around windows.
#+begin_src haskell
mySpacing :: Integer -> l a -> XMonad.Layout.LayoutModifier.ModifiedLayout Spacing l a
mySpacing i = spacingRaw False (Border i i i i) True (Border i i i i) True

mySpacing' :: Integer -> l a -> XMonad.Layout.LayoutModifier.ModifiedLayout Spacing l a
mySpacing' i = spacingRaw False (Border i (2 * i) i i) True (Border 0 0 i i) True

myTabbedSpacing :: Integer -> l a -> XMonad.Layout.LayoutModifier.ModifiedLayout Spacing l a
myTabbedSpacing i = spacingRaw False (Border i i (2 * i) (2 * i)) True (Border 0 0 0 0) True
#+end_src

** Defining a smart border
This type is for adding a "smart" bar decoration style with the desired theme and direction. The idea of "smart" I think comes from smart borders and all it means is the bar is only visible when there's more than one window in the current layout. I'm using this as an alternative to [[https://hackage.haskell.org/package/xmonad-contrib-0.17.0/docs/XMonad-Layout-IfMax.html][XMonad.Layout.IfMax]] because of this bug: [[https://github.com/xmonad/xmonad-contrib/issues/75][Github Issue]]
This code comes from the following (I've refactored the code snippet to work correctly while using tabbed subLayout): [[https://www.reddit.com/r/xmonad/comments/glkc6r/can_xmonad_apply_window_decorations_nofrillsdeco/fqy1vda/][Redit]], [[https://github.com/disconsis/literate-xmonad-config/blob/master/src/config.org#layouts-like-tall][Source Code1]], [[https://github.com/willbush/system/commit/0b502f9e44d934f6d793659353bff8d7de5e1690][Commit - Source Code2]]

#+begin_src haskell
newtype SmartBarDeco a = SmartBarDeco Direction2D
  deriving (Eq, Show, Read)

instance Eq a => DecorationStyle SmartBarDeco a where
  describeDeco _ = "SmartDeco"

  shrink (SmartBarDeco direction) = shrinkWinForDeco direction
   where
    shrinkWinForDeco :: Direction2D -> Rectangle -> Rectangle -> Rectangle
    shrinkWinForDeco U (Rectangle _ _ _ dh) (Rectangle x y w h) = Rectangle x (y + fi dh) w (h - fi dh)
    shrinkWinForDeco D (Rectangle _ _ _ dh) (Rectangle x y w h) = Rectangle x y w (h - fi dh)
    shrinkWinForDeco L (Rectangle _ _ dw _) (Rectangle x y w h) = Rectangle (x + fi dw) y (w - fi dw) h
    shrinkWinForDeco R (Rectangle _ _ dw _) (Rectangle x y w h) = Rectangle x y (w - fi dw) h

  pureDecoration (SmartBarDeco direction) decoWidth decoHeight _ s windowRects currentWin@(_win, Rectangle x y w h)
    | (isInStack s _win) && (decoHeight < h) && (length windowRects > 1) = Just smartBarBar
    | otherwise = Nothing
   where
    smartBarBar = case direction of
      U -> Rectangle x y w decoHeight
      D -> Rectangle x (y + fi (h - decoHeight)) w decoHeight
      L -> Rectangle x y decoWidth h
      R -> Rectangle (x + fi (w - decoWidth)) y decoWidth h

smartBarDeco
  :: Eq a
  => Direction2D
  -> Theme
  -> l a
  -> ModifiedLayout (Decoration SmartBarDeco DefaultShrinker) l a
smartBarDeco direction theme =
  decoration shrinkText theme $ SmartBarDeco direction
#+end_src


** The layout function to be called in main
#+begin_src haskell
myLayout
  = tiled
    ||| grid
    ||| floats
    ||| magnifiedTiled
    ||| mirror
    ||| full
    ||| tabs
    ||| spiral1
  where
    tiled             = renamed [Replace "Tiled"]
                            $ avoidStruts
                            $ addTopBar
                            $ windowNavigation
                            $ addTabs shrinkText myTabTheme
                            $ subLayout [] Simplest
                            $ mySpacing gap
                            $ Tall nmaster delta ratio

    magnifiedTiled    = renamed [Replace "Magnified"]
                            $ avoidStruts
                            $ addTopBar
                            $ windowNavigation
                            $ addTabs shrinkText myTabTheme
                            $ subLayout [] Simplest
                            $ mySpacing gap
                            $ Mag.magnifiercz' 1.1
                            $ Tall nmaster delta ratio

    grid              = renamed [Replace "Grid"]
                            $ avoidStruts
                            $ addTopBar
                            $ windowNavigation
                            $ addTabs shrinkText myTabTheme
                            $ subLayout [] Simplest
                            $ mySpacing gap
                            $ limitWindows 12
                            $ Grid

    full              = renamed [Replace "Full"]
                            $ avoidStruts
                            $ mySpacing gap
                            $ smartBorders
                            $ noBorders
                            $ Full

    mirror            = renamed [Replace "Mirror Tiled"]
                            $ avoidStruts
                            $ addTopBar
                            $ windowNavigation
                            $ addTabs shrinkText myTabTheme
                            $ subLayout [] Simplest
                            $ mySpacing gap
                            $ Mirror
                            $ Tall nmaster delta ratio

    floats             = renamed [Replace "Float"]
                            $ avoidStruts
                            $ mySpacing gap
                            $ smartBorders
                            $ limitWindows 20
                            $ simplestFloat

    tabs              = renamed [Replace "Tabbed"]
                            $ avoidStruts
                            $ myTabbedSpacing gap
                            $ tabbed shrinkText myTabTheme

    spiral1            = renamed [Replace "Spiral"]
                            $ avoidStruts
                            $ addTopBar
                            $ windowNavigation
                            $ addTabs shrinkText myTabTheme
                            $ subLayout [] Simplest
                            $ mySpacing gap
                            $ limitWindows 12
                            $ spiral (6/7)

    addTopBar = smartBarDeco U topBarTheme
    -- The default number of windows in the master pane
    nmaster = 1
    -- Default proportion of screen occupied by master pane
    ratio   = 1/2
    -- Percent of screen to increment by when resizing panes
    delta   = 3/100
    -- Border space
    gap = 10
#+end_src

* Window rules:
Execute arbitrary actions and WindowSet manipulations when managing a new window. You can use this to, for example, always float a particular program, or have a client always appear on a particular workspace.

To find the property name associated with a program, use ~xprop | grep WM_CLASS~ and click on the client you're interested in.

To match on the WM_NAME, you can use 'title' in the same way that 'className' and 'resource' are used below.
#+begin_src haskell
myManageHook =
    manageSpawn
    <+> insertPosition Master Newer
      where
        manageSpawn = composeOne
          [ className =? "mpv"            -?> doFloat
          , className =? "Oblogout"       -?> doFloat
          , className =? "Brave-browser"  -?> doShift $ myWorkspaces !! 0
          , className =? "Emacs"          -?> doShift $ myWorkspaces !! 2
          , isDialog                      -?> doCenterFloat
          , resource  =? "desktop_window" -?> doIgnore
          , isDialog  -?> doCenterFloat
          , isBrowserDialog -?> forceCenterFloat
          , isRole =? gtkFile  -?> forceCenterFloat
          , isRole =? "pop-up" -?> doCenterFloat
          , isInProperty "_NET_WM_WINDOW_TYPE"
                         "_NET_WM_WINDOW_TYPE_SPLASH" -?> doCenterFloat
          ]
        isBrowserDialog = isDialog <&&> className =? myBrowserClass
        gtkFile = "GtkFileChooserDialog"
        isRole = stringProperty "WM_WINDOW_ROLE"
#+end_src


From: [[https://github.com/pjones/xmonadrc/blob/master/src/XMonad/Local/Action.hs][Github]]
Useful when a floating window requests stupid dimensions. There was a bug in Handbrake that would pop up the file dialog with almost no height due to one of my rotated monitors.
#+begin_src haskell
forceCenterFloat :: ManageHook
forceCenterFloat = doFloatDep move
  where
    move :: W.RationalRect -> W.RationalRect
    move _ = W.RationalRect x y w h

    w, h, x, y :: Rational
    w = 1/3
    h = 1/2
    x = (1-w)/2
    y = (1-h)/2
#+end_src

* Event handling

Defines a custom handler function for X Events. The function should return (All True) if the default handler is to be run afterwards. To combine event hooks use ~mappend~ or ~mconcat~ from Data.Monoid.

#+begin_src haskell
myEventHook = swallowEventHook (className =? "kitty"  <||> className =? "Termite") (return True)
#+end_src

* Log Hook
#+begin_src haskell
myLogHook :: X ()
myLogHook = fadeInactiveLogHook fadeAmount
            where fadeAmount = 1.0
#+end_src

* Set colours
#+begin_src haskell
blue, lowWhite, magenta, red, white, yellow :: String
magenta  = "#ff79c6"
blue     = "#bd93f9"
white    = "#f8f8f2"
yellow   = "#f1fa8c"
red      = "#ff5555"
lowWhite = "#bbbbbb"
#+end_src

* Status bars and logging
Perform an arbitrary action on each internal state change or X event.
See the ~XMonad.Hooks.DynamicLog~ extension for examples.
#+begin_src haskell
myLogHookPP :: DC.Client -> PP
myLogHookPP dbus = def
    {
     ppOutput = D.send dbus
    , ppCurrent = wrap ("%{F" ++ blue ++ "} ") " %{F-}"
    , ppVisible = wrap ("%{F" ++ blue ++ "} ") " %{F-}"
    , ppUrgent = wrap ("%{F" ++ red ++ "} ") " %{F-}"
    , ppTitle = wrap ("%{F" ++ lowWhite ++ "} ") " %{F-}"
    , ppOrder           = \[_ , l, _] -> [l]
    , ppSep  =  "•"
    }

myAddSpaces :: Int -> String -> String
myAddSpaces len str = sstr ++ replicate (len - length sstr) ' '
  where
    sstr = shorten len str
#+end_src

* Startup hook
Perform an arbitrary action each time xmonad starts or is restarted with mod-q.  Used by, e.g., ~XMonad.Layout.PerWorkspace~ to initialize per-workspace layout choices.
#+begin_src haskell
myStartupHook :: X ()
myStartupHook = do
  -- spawn $ "wal -i " ++ myWallpapers -- pywal sets random wallpaper
  spawn $ "feh --randomize --bg-scale " ++ myWallpapers ++ "/*"  -- set wallpaper
  spawnOnce "xsetroot -cursor_name left_ptr"
  -- spawnOnce "xscreensaver -no-splash &"
  spawnOnce "nm-applet --sm-disable &"
  spawnOnce "blueman-applet &"
  spawnOnce "flameshot &"
  spawnOnce "[[ -s ~/.Xmodmap ]] && xmodmap ~/.Xmodmap"
  spawnOnce "/usr/bin/lxqt-policykit-agent &"
  spawnOnce "xfce4-power-manager &"
  spawnOnce "picom &"
  spawnOnce "alttab -fg \"#d58681\" -bg \"#4a4a4a\" -frame \"#eb564d\" -t 128x150 -i 127x64 -w 1"
  spawnOnce "~/.config/polybar/launch.sh --forest"
  spawnOnce "~/.config/conky/conky-startup.sh"
  spawnOnce "/usr/bin/emacs --daemon"
#+end_src

* Xmobar Config
So that xmobar can communicate to xmonad about the opened windows, workspaces, layoutthemes etc.

** Set colours for xmobar
#+begin_src haskell :tangle no
xblue, xlowWhite, xmagenta, xred, xwhite, xyellow :: String -> String
xmagenta  = xmobarColor magenta  ""
xblue     = xmobarColor blue     ""
xwhite    = xmobarColor white    ""
xyellow   = xmobarColor yellow   ""
xred      = xmobarColor red      ""
xlowWhite = xmobarColor lowWhite ""
#+end_src

** Xmobar config to be called in main
#+begin_src haskell :tangle no
myXmobarPP :: PP
myXmobarPP = def
    { ppSep             = xmagenta " • "
    , ppTitleSanitize   = xmobarStrip
    , ppCurrent         = wrap " " "" . xmobarBorder "Top" color5 2
    , ppHidden          = xwhite . wrap " " ""
    , ppHiddenNoWindows = xlowWhite . wrap " " ""
    , ppUrgent          = xred . wrap (xyellow "!") (xyellow "!")
    , ppOrder           = \[ws, l, _, wins] -> [ws, l]
    , ppExtras          = [logTitles formatFocused formatUnfocused]
    }
  where
    formatFocused   = wrap (xwhite    "[") (xwhite    "]") . xmagenta . ppWindow
    formatUnfocused = wrap (xlowWhite "[") (xlowWhite "]") . xblue    . ppWindow

-- Windows should have *some* title, which should not not exceed a sane length.
ppWindow :: String -> String
ppWindow = xmobarRaw . (\w -> if null w then "Untitled" else w) . shorten 30
#+end_src

* Main function
Now run xmonad with all the defaults we set up.
Run xmonad with the settings specified.
#+begin_src haskell
main = do
  -- Connect to DBus
  dbus <- D.connect
  -- Request access (needed when sending messages)
  D.requestAccess dbus

  xmonad
    $ ewmhFullscreen
    $ ewmh
    -- $ withEasySB (statusBarProp ("xmobar " ++ myBar) (pure myXmobarPP)) defToggleStrutsKey
    $ docks defaults {logHook = dynamicLogWithPP (myLogHookPP dbus) <+> myLogHook}
#+end_src

** A structure containing configuration settings overriding fields in the default config
Any field you don't override, will use the defaults defined in xmonad/XMonad/Config.hs
#+begin_src haskell
defaults = def {
      -- simple stuff
        terminal           = myTerminal,
        focusFollowsMouse  = myFocusFollowsMouse,
        borderWidth        = myBorderWidth,
        modMask            = myModMask,
        -- numlockMask deprecated in 0.9.1
        -- numlockMask        = myNumlockMask,
        workspaces         = myWorkspaces,
        normalBorderColor  = myNormalBorderColor,
        focusedBorderColor = myFocusedBorderColor,

      -- key bindings
      --  keys               = myKeys,
        mouseBindings      = myMouseBindings,

      -- hooks, layouts
        layoutHook         = showWName' myShowWNameTheme $ myLayout,
        manageHook         = myManageHook,
        handleEventHook    = myEventHook,
        -- logHook            = myLogHook,
        startupHook        = myStartupHook
    } `additionalKeysP` myKeys
#+end_src
