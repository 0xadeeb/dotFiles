#+TITLE:Doom Emacs Config
#+AUTHOR: Adeeb HS
#+STARTUP: showeverything
#+PROPERTY: header-args :tangle config.el

* Table of contents :toc:
- [[#instructions][Instructions]]
- [[#default-configs][Default configs]]
- [[#set-path-variables-in-emacs-from-shell][Set path variables in emacs from shell]]
- [[#visual][Visual]]
  - [[#general-information][General Information]]
  - [[#theme][Theme]]
  - [[#scrolling][Scrolling]]
  - [[#font][Font]]
  - [[#icons][Icons]]
  - [[#configure-indentation][Configure Indentation]]
- [[#org-mode-config][Org mode config]]
  - [[#default-configs-1][Default configs]]
- [[#remap-keys][Remap Keys]]
  - [[#esc-to-fj][Esc to fj]]
  - [[#resizing-windows][Resizing windows]]
  - [[#switch-m-x-and-eval-expression-key-maps][Switch M-x and eval Expression key maps]]
  - [[#switch-evil-beginning-of-line-and-first-non-white-space-character-keys][Switch evil beginning of line and first non white space character keys]]
  - [[#define-back-tab][Define back tab]]
- [[#devepolment][Devepolment]]
  - [[#company-mode][Company mode]]
  - [[#languages][Languages]]
  - [[#competitive-coding][Competitive coding]]
- [[#shells][Shells]]
  - [[#v-term][V-term]]
- [[#browsers][Browsers]]
  - [[#eww-browser][Eww browser]]
- [[#dashboard][Dashboard]]
- [[#hide-files-or-directories][Hide files or directories]]
- [[#flyspell][FlySpell]]
- [[#configuration-of-emacs-daemon][Configuration of emacs daemon]]
  - [[#check-if-current-session-is-daemon-session][Check if current session is daemon session]]
- [[#extra-hacks][Extra hacks]]
  - [[#rainbow-mode][Rainbow mode]]
  - [[#beacon][Beacon]]

* Instructions
1. Place your private configuration here! Remember, you do not need to run 'doom sync' after modifying this file!

2. Here are some additional functions/macros that could help you configure Doom:
   + ~load!~ for loading external *.el files relative to this one
   + ~use-package!~ for configuring packages
   + ~after!~ for running code after a package has loaded
   + ~add-load-path!~ for adding directories to the ~load-path~, relative to this file. Emacs searches the ~load-path~ when you load packages with ~require~ or ~use-package~.
   + ~map!~ for binding new keys

3. To get information about any of these functions/macros, move the cursor over the highlighted symbol at press 'K'. This will open documentation for it, including demos of how they are used.

4. You can also try 'gd' to jump to their definition and see how they are implemented.

* Default configs
#+begin_src elisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
(setq user-full-name "Adeeb HS"
      user-mail-address "adeeb.hs1@gmail.com"
      display-line-numbers-type 'relative
      ;;confirm-kill-emacs nil
)
#+end_src

* Set path variables in emacs from shell
Emacs instance launched as a GUI app inherits a default minimal set of environment variables that are probably not the ones that are used in a terminal window. Therefore the path is imported from shell.
#+begin_src emacs-lisp
(when (or (memq window-system '(mac ns x))(daemonp))
  (exec-path-from-shell-initialize))
;; (when (daemonp)
;;   (exec-path-from-shell-initialize))
#+end_src

* Visual
** General Information
+ Doom exposes five (optional) variables for controlling fonts in Doom. Here are the three important ones:
  - ~doom-font~ -- Used mostly
  - ~doom-variable-pitch-font~ -- Used in some extentions like eww browser
  - ~doom-big-font~ -- used for ~doom-big-font-mode~; use this for presentations or streaming.

+ They all accept either a font-spec, font string ("Input Mono-12"), or xlfd font string. You generally only need these two:

+ There are two ways to load a theme. Both assume the theme is installed and available. You can either set ~doom-theme~ or manually load a theme with the ~load-theme~ function. This is the default:

** Theme
#+begin_src elisp
(setq doom-theme 'doom-dracula)
#+end_src

** Scrolling
#+begin_src elisp
(setq scroll-margin 3)
(setq hscroll-margin 3)
#+end_src

** Font
#+begin_src elisp
(setq doom-font (font-spec :family "Source Code Pro" :size 25 :weight 'normal)
      doom-variable-pitch-font (font-spec :family "Source Code Pro" :size 23)
      doom-big-font (font-spec :family "Source Code Pro" :size 35 :weight 'normal))
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))

(use-package fira-code-mode
  :config
  (fira-code-mode-set-font)
  :custom (fira-code-mode-disabled-ligatures '("www" "[]" "#{" "#(" "#_" "#_(" "x" "***" "<>")) ;; List of ligatures to turn off
  :hook prog-mode org-mode ;; Enables fira-code-mode automatically for programming and org major modes
  )
(set-language-environment "UTF-8")
(set-default-coding-systems 'utf-8)
#+end_src

** Icons
#+begin_src elisp
(use-package all-the-icons
  :if (display-graphic-p))
(use-package all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode)
  )             ;; Icons for dired
(setq doom-themes-treemacs-theme "doom-colors")
(setq +ligatures-extras-in-modes '(haskell-mode org-mode))
;; (set-scroll-bar-mode 'right)
#+end_src

** Configure Indentation
#+begin_src elisp
(use-package highlight-indent-guides
  :ensure t
  :commands highlight-indent-guides-mode
  :hook (prog-mode . highlight-indent-guides-mode)
  :config
  (setq highlight-indent-guides-method 'character
        ;;highlight-indent-guides-character ?\❯
   )
 )
#+end_src

* Org mode config
** Default configs
#+begin_src elisp
(setq org-directory "~/org/")
(map! :leader
      :desc "Org babel tangle" "m v" #'org-babel-tangle)
(after! org
  (setq
        org-pretty-entities t
        org-startup-folded t
        org-ellipsis " ▼ "
        org-superstar-headline-bullets-list '("◉" "●" "○" "◆" "●" "○" "◆")
        ;;org-superstar-item-bullet-alist '((?+ . ?➤) (?- . ?✦)) ; changes +/- symbols in item lists
        org-log-done 'time
        org-hide-emphasis-markers t
        )
  )
#+end_src

* Remap Keys
** Esc to fj
#+begin_src elisp
(setq key-chord-two-keys-delay 0.1)
(key-chord-define evil-insert-state-map "fj" 'evil-normal-state)
(key-chord-mode 1)
#+end_src

** Resizing windows
Use ~SPC w c~ and then the following keys

| Description            | Key Binding |
|------------------------+-------------|
| Increase Window Width  | =           |
| Decrease Window Width  | -           |
| Increase Window Height | +           |
| Decrease Window Height | _           |

#+begin_src elisp
(defhydra hydra-window-size (:timeout 5)
"Resize window"
("=" evil-window-increase-width "Increase Width")
("-" evil-window-decrease-width "Decrease Width")
("+" evil-window-increase-height "Increase Height")
("_" evil-window-decrease-height "Decrease Height")
("f" nil "finished" :exit t))

(map! :leader
    (:prefix ("w". "window")
    :desc "Resize current window" "c" #'hydra-window-size/body))
#+end_src

** Switch M-x and eval Expression key maps

#+begin_src elisp
(map! :leader
      :desc "M-x" ";" #'execute-extended-command)

(map! :leader
      :desc "Eval Expression" ":" #'eval-expression)
#+end_src

** Switch evil beginning of line and first non white space character keys
#+begin_src elisp
(define-key evil-normal-state-map (kbd "0") #'evil-first-non-blank)
(define-key evil-normal-state-map (kbd "^") #'evil-beginning-of-line)
#+end_src

** Define back tab

#+begin_src elisp
(global-set-key (kbd "<backtab>") 'un-indent-by-removing-4-spaces)
(defun un-indent-by-removing-4-spaces ()
  "remove 4 spaces or a tab from beginning of of line"
  (interactive)
  (save-excursion
    (save-match-data
      (beginning-of-line)
      ;; get rid of tabs at beginning of line
      (when (looking-at "^\\s-+")
        (untabify (match-beginning 0) (match-end 0)))
      (when (looking-at "^    ")
        (replace-match "")))))
#+end_src

* Devepolment

** Company mode
#+begin_src elisp
(use-package company
  :after lsp-mode
  :hook (lsp-mode . company-mode)
  :custom
  ;; (+lsp-company-backends '(company-tabnine :separate company-capf company-yasnippet)) ;; to enable Tab-nine autocomplete
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0))

(use-package company-box
  :hook (company-mode . company-box-mode))
#+end_src

** Languages
*** Language Server
**** Lsp Mode
Setting up lsp mode
#+begin_src elisp
(use-package lsp-mode
  :after lsp
  :commands (lsp lsp-deferred)
  :config
  (lsp-enable-which-key-integration t)
  )
#+end_src

Configuring lsp-mode after loading, refer [[https://emacs-lsp.github.io/lsp-mode/tutorials/how-to-turn-off/][Lsp mode features]]
#+begin_src elisp
(after! lsp-mode
    (setq lsp-enable-symbol-highlighting nil)                   ;; 1
    (setq lsp-ui-doc-enable nil)                                ;; 2
    (setq lsp-ui-doc-show-with-cursor nil)
    (setq lsp-ui-doc-show-with-mouse nil)
    (setq lsp-lens-enable nil)                                  ;; 3
    (setq lsp-headerline-breadcrumb-segments
          '(path-up-to-project file symbols))
    (setq lsp-headerline-breadcrumb-enable nil)                 ;; 4
    (setq lsp-ui-sideline-enable t)                             ;; 5
    (setq lsp-ui-sideline-show-code-actions t)
    (setq lsp-ui-sideline-enable t)                             ;; 6
    (setq lsp-ui-sideline-show-hover t)
    (setq lsp-modeline-code-actions-enable t)                   ;; 7

    (setq lsp-diagnostics-provider :auto)                       ;; 8
    (setq lsp-ui-sideline-enable t)                             ;; 9
    (setq lsp-eldoc-enable-hover t)                             ;; 10
    (setq lsp-modeline-diagnostics-enable t)                    ;; 11

    (setq lsp-signature-auto-activate t)                        ;; 12
    (setq lsp-signature-render-documentation nil)               ;; 13

    (setq lsp-completion-provider :capf)                        ;; 14
    (setq lsp-completion-show-detail t)                         ;; 15
    (setq lsp-completion-show-kind t)                           ;; 16
  )
#+end_src

**** Lsp Ui
#+begin_src elisp
(use-package lsp-ui
  :after lsp
  :hook (lsp-mode . lsp-ui-mode)
  :custom
  (lsp-ui-doc-position 'bottom)
  )

#+end_src

**** Lsp Treemacs
#+begin_src elisp
(use-package lsp-treemacs
  :after lsp)
#+end_src

*** C/C++
#+begin_src elisp
(setq lsp-clients-clangd-args '("--header-insertion=never"))
#+end_src

*** Python
**** Set-up LSP for python
#+begin_src elisp
(use-package lsp-pyright
  :after lsp
  :ensure t
  :init
  (setq lsp-pyright-multi-root nil)
  :hook (python-mode . (lambda ()
                          (require 'lsp-pyright)
                          (lsp))))  ; or lsp-deferred
#+end_src

**** Pyvenv package to set up virtual environments
#+begin_src elisp
(use-package pyvenv
  :config
  (pyvenv-mode 1))
#+end_src

*** Haskell
**** Setting up extra ligatures just for haskell
#+begin_src elisp
(plist-put! +ligatures-extra-symbols
            :sum        "∑"
            :product    "∏"
            )

(after! haskell-mode
  (set-ligatures!  'haskell-mode
    :lambda        "\\"
    :composition   "."
    :null          "()"
    :int           "Int"
    :float         "Double"
    :str           "String"
    :bool          "Bool"
    :in            "`elem`"
    :not-in        "`notElem`"
    :union         "`union`"
    :intersect     "`intersect`"
    :or            "||"
    :and           "&&"
    :for           "forall"
    :sum           "sum"
    :product       "product"
    )
   )

#+end_src

** Competitive coding
*** Add c++ template automatically while file creation
#+begin_src emacs-lisp
(use-package autoinsert
  :config
  (setq auto-insert-query nil)             ; disable the default auto-inserts
  (auto-insert-mode 1)                     ; enable auto-insert-mode globally
  (add-hook 'find-file-hook 'auto-insert)  ; insert templates when we create new files
  (setq auto-insert-alist nil)             ; remove this line to restore defaults
  ;; (add-to-list 'auto-insert-alist          ; add "competitive coding" templates to auto insert
  ;;              '("^/home/adeeb/code/.+\\.cpp\\'" . "/home/adeeb/code/template.cpp"))
  (add-to-list 'auto-insert-alist          ; the same with ~ expansion
               (cons (concat "^" (expand-file-name "~/code/") ".+\\.cpp\\'")
                     (expand-file-name "~/code/template.cpp")))
 )
#+end_src

* Shells
** V-term
Open v-term in a new window
#+begin_src elisp
(setq vterm-shell "/bin/zsh")
(after! vterm
  (set-popup-rule! "\\*doom:vterm-popup:.*\\*" :size 0.35 :vslot -4 :select t :quit nil :ttl 0 :side 'right)
  )
#+end_src

* Browsers
** Eww browser
#+begin_src elisp
(setq
 ;; browse-url-browser-function 'eww-browse-url                    ; Use eww as the default browser
 shr-use-fonts  nil                                             ; No special fonts
 shr-use-colors nil                                             ; No colours
 shr-indentation 2                                              ; Left-side margin
 shr-width 70                                                   ; Fold text to 70 columns
 shr-image-animate nil                                          ; Amination switched off
 shr-inhibit-images t                                           ; Images are switched off
 )
(defun my/eww-toggle-images ()
  "Toggle whether images are loaded and reload the current page from cache."
  (interactive)
  (setq-local shr-inhibit-images (not shr-inhibit-images))
  (eww-reload t)
  (message "Images are now %s"
           (if shr-inhibit-images "off" "on")))

(map! :leader
    (:prefix ("e". "eww-browser")
    :desc "Open new eww buffer" "o" #'eww))

(after! eww
  (set-popup-rule! "*eww*" :size 0.4 :vslot -4 :select t :quit nil :ttl 0 :side 'right)
  )

#+end_src

* Dashboard
Basic set up for dashboard
#+begin_src elisp
(use-package dashboard
  :init
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title nil)
  ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
  (setq dashboard-startup-banner "~/.config/doom/logos/black_hole.png")  ;; use custom image as banner
  (setq dashboard-set-init-info t)
  (setq dashboard-center-content nil) ;; set to 't' for centered content
  (setq dashboard-items '((recents . 5)
                          (projects . 5)))
  (setq dashboard-set-navigator t)
  (setq dashboard-projects-backend 'projectile)
  (setq doom-fallback-buffer-name "*dashboard*")

:config
  (dashboard-setup-startup-hook)
  (dashboard-modify-heading-icons '((bookmarks . "book"))))

#+end_src

* Hide files or directories
#+begin_src elisp
(add-to-list 'recentf-exclude "/.emacs.d/.local/etc/workspaces/autosave") ;;hide recent files from recentf
(add-to-list 'projectile-ignored-projects "*.emacs.d")                 ;;hide emacs.d dir from projectile projects
#+end_src

* FlySpell
Spell checker for text mode buffers
#+begin_src elisp :tangle no
(use-package flyspell
  :ensure nil
  :defer t
  :if (executable-find "aspell")
  :hook (((text-mode outline-mode latex-mode org-mode markdown-mode) . flyspell-mode))
  :custom
  (flyspell-issue-message-flag nil)
  (ispell-program-name "aspell")
  (ispell-extra-args
   '("--sug-mode=ultra" "--lang=en_US" "--camel-case"))
  )
(remove-hook 'org-mode-hook #'flyspell-mode)
#+end_src

* Configuration of emacs daemon
** Check if current session is daemon session
#+begin_src emacs-lisp
(if (daemonp)
    (message "Loading emacs as a client!")
    (message "Loading regular emacs"))
#+end_src

* Extra hacks
** Rainbow mode
#+begin_src emacs-lisp
(use-package rainbow-mode
  :hook prog-mode org-mode ;; Enables rainbow-mode automatically for programming and org major modes
)
#+end_src
** Beacon
#+begin_src emacs-lisp
(beacon-mode 1)
#+end_src
