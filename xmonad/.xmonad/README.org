#+title: My xmonad 0.17 config
#+AUTHOR: Adeeb HS
#+STARTUP: showeverything
#+PROPERTY: header-args :tangle xmonad.hs

* Table of contents :toc:
- [[#imports][Imports]]
- [[#setting-up-variables-for-future-use][Setting up variables for future use]]
  - [[#the-preferred-terminal-program][The preferred terminal program]]
  - [[#whether-focus-follows-the-mouse-pointer][Whether focus follows the mouse pointer.]]
  - [[#width-of-the-window-border-in-pixels][Width of the window border in pixels.]]
  - [[#mod-key][Mod Key]]
  - [[#set-up-workspaces][Set up workspaces]]
  - [[#custom-variables][Custom variables]]
- [[#key-bindings][Key bindings]]
  - [[#basic-keybindings][Basic keybindings]]
  - [[#keybinding-to-switch-workspaces][Keybinding to switch workspaces]]
  - [[#keybinding-to-switch-physical-screens][Keybinding to switch physical screens]]
  - [[#mouse-bindings][Mouse bindings]]
- [[#layouts][Layouts:]]
  - [[#space-between-windows][Space between windows]]
  - [[#the-layout-function-to-be-called-in-main][The layout function to be called in main]]
- [[#window-rules][Window rules:]]
- [[#event-handling][Event handling]]
- [[#status-bars-and-logging][Status bars and logging]]
- [[#startup-hook][Startup hook]]
- [[#xmobar-config][Xmobar Config]]
  - [[#set-colours-for-xmobar][Set colours for xmobar]]
  - [[#xmobar-config-to-be-called-in-main][Xmobar config to be called in main]]
- [[#main-function][Main function]]
  - [[#a-structure-containing-configuration-settings-overriding-fields-in-the-default-config][A structure containing configuration settings overriding fields in the default config]]

* Imports
These are Haskell modules that we must import so that we can use their functions later in the config.
#+begin_src haskell
-- Basic imports
import XMonad
import System.Exit

-- Actions
import XMonad.Actions.FloatSnap

-- Data Structures
import Data.Monoid
import qualified Data.Map as M

-- Data types
import qualified XMonad.StackSet as W

-- Hooks
import XMonad.Hooks.ManageDocks
import XMonad.Hooks.EwmhDesktops
import XMonad.Hooks.DynamicLog
import XMonad.Hooks.InsertPosition
import XMonad.Hooks.ManageHelpers
import XMonad.Hooks.StatusBar
import XMonad.Hooks.StatusBar.PP

-- Utils
import XMonad.Util.SpawnOnce
import XMonad.Util.Run
import XMonad.Util.Loggers
import XMonad.Util.EZConfig (additionalKeysP)

-- Layouts
import XMonad.Layout.SimplestFloat

-- Layout modifiers
import XMonad.Layout.LayoutModifier
import XMonad.Layout.Spacing
import XMonad.Layout.LimitWindows (limitWindows, increaseLimit, decreaseLimit)
import XMonad.Layout.Renamed
import XMonad.Layout.NoBorders
import qualified XMonad.Layout.Magnifier as Mag

-- Colors file generated by pywal to choose the best colour combo for the current wallpaper
import Colors

#+end_src

* Setting up variables for future use

** The preferred terminal program
#+begin_src haskell
myTerminal      = "kitty"
#+end_src

** Whether focus follows the mouse pointer.
#+begin_src haskell
myFocusFollowsMouse :: Bool
myFocusFollowsMouse = True
#+end_src

** Width of the window border in pixels.
#+begin_src haskell
myBorderWidth   = 1
#+end_src

** Mod Key
The ~modMask~ lets you specify which modkey you want to use. The default is mod1Mask ("left alt").  You may also consider using mod3Mask ("right alt"), which does not conflict with emacs keybindings. The "windows key" is usually mod4Mask.

#+begin_src haskell
myModMask       = mod4Mask
myModMask'       = mod3Mask
#+end_src


** Set up workspaces
The default number of workspaces (virtual screens) and their names.
By default numeric strings is used, but any string may be used as a workspace name. The number of workspaces is determined by the length of this list.

#+begin_src haskell
-- A tagging example:
--  workspaces = ["web", "irc", "code" ] ++ map show [4..9]
myWorkspaces    = ["1","2","3","4","5","6","7","8","9"]
#+end_src

*** Border colors for unfocused and focused windows, respectively
#+begin_src haskell
myNormalBorderColor  = "#ffffff"
myFocusedBorderColor = "#00ffff"
#+end_src

** Custom variables

#+begin_src haskell
myEmacs = "emacsclient -c -a 'emacs' "
myXmobar = "~/.xmonad/xmobar.hs"
#+end_src

* Key bindings
Add, modify or remove key bindings here.
** Basic keybindings
#+begin_src haskell
myKeys :: [(String , X ())]
myKeys =
    -- launch a terminal
    [ ("M-S-<Return>", spawn myTerminal)

    -- launch dmenu
    , ("M-p", spawn "rofi -show drun")
    , ("M-o", spawn "rofi -show filebrowser")

    -- launch gmrun
    , ("M-S-p", spawn "gmrun")

    -- close focused window
    , ("M-S-c", kill)

     -- Rotate through the available layout algorithms
    , ("M-<Space>", sendMessage NextLayout)

    --  Reset the layouts on the current workspace to default
    -- , ("M-S-<Space>", setLayout $ XMonad.layoutHook XConfig)

    -- Resize viewed windows to the correct size
    , ("M-n", refresh)

    -- Move focus to the next window
    , ("M-<Tab>", windows W.focusDown)

    -- Move focus to the next window
    , ("M-j", windows W.focusDown)

    -- Move focus to the previous window
    , ("M-k", windows W.focusUp  )

    -- Move focus to the master window
    , ("M-m", windows W.focusMaster  )

    -- Swap the focused window and the master window
    , ("M-<Return>", windows W.swapMaster)

    -- Swap the focused window with the next window
    , ("M-S-j", windows W.swapDown  )

    -- Swap the focused window with the previous window
    , ("M-S-k", windows W.swapUp    )

    -- Shrink the master area
    , ("M-h", sendMessage Shrink)

    -- Expand the master area
    , ("M-l", sendMessage Expand)

    -- Push window back into tiling
    , ("M-t", withFocused $ windows . W.sink)

    -- Increment the number of windows in the master area
    , ("M-,", sendMessage (IncMasterN 1))

    -- Deincrement the number of windows in the master area
    , ("M-.", sendMessage (IncMasterN (-1)))

    -- Toggle the status bar gap
    -- Use this binding with avoidStruts from Hooks.ManageDocks.
    -- See also the statusBar function from Hooks.DynamicLog.

    , ("M-S-b", sendMessage ToggleStruts)

    -- Quit xmonad
    , ("M-S-q", io (exitWith ExitSuccess))

    -- Restart xmonad
    , ("M-q", spawn "xmonad --recompile && ( killall xmobar ; xmonad --restart )")

    -- Open emacs
    , ("M-e e", spawn $ myEmacs ++ "-e '(dashboard-refresh-buffer)'")

    -- Lock screen
    , ("M-S-l", spawn  "betterlockscreen -l")

    -- Increase Brightness
    , ("<XF86MonBrightnessUp>", spawn "~/.config/dunst/brightness/brightnessControl.sh up")

    -- Decrease Brightness
    , ("<XF86MonBrightnessDown>", spawn "~/.config/dunst/brightness/brightnessControl.sh down")

    -- Increase volume
    , ("<XF86AudioRaiseVolume>", spawn "~/.config/dunst/volume/volume.sh up")

    -- Decrease volume
    , ("<XF86AudioLowerVolume>", spawn "~/.config/dunst/volume/volume.sh down")

    -- Mute and unmute
    , ("<XF86AudioMute>", spawn "~/.config/dunst/volume/volume.sh toggle")

    -- No borders
    --, ("M-S-n" SendMessage )
    ]
#+end_src

** Keybinding to switch workspaces
mod-[1..9], Switch to workspace N and mod-shift-[1..9], Move client to workspace N
#+begin_src haskell
    ++
    [("M-" ++ m ++ [i], windows $ f [i])
        | i <- "123456789"
        , (f, m) <- [(W.greedyView, ""), (W.shift, "S-")]]
#+end_src

** Keybinding to switch physical screens
~mod-{w,e,r}~, Switch to physical/Xinerama screens 1, 2, or 3
~mod-shift-{w,e,r}~, Move client to screen 1, 2, or 3
#+begin_src haskell :tangle no
    ++
    [((m .|. modm, key), screenWorkspace sc >>= flip whenJust (windows . f))
        | (key, sc) <- zip [xK_w, xK_e, xK_r] [0..]
        , (f, m) <- [(W.view, 0), (W.shift, shiftMask)]]
#+end_src


** Mouse bindings
#+begin_src haskell
myMouseBindings XConfig {XMonad.modMask = modm} = M.fromList

    -- mod-button1, Set the window to floating mode and move by dragging
    -- [ ((modm, button1), (\w -> focus w >> mouseMoveWindow w
    --                                    >> windows W.shiftMaster))

    [ ((modm, button1), \w -> focus w >> mouseMoveWindow w
                                       >> afterDrag (snapMagicResize [L,R,U,D] (Just 50) (Just 50) w))

    -- mod-button2, Raise the window to the top of the stack
    , ((modm, button2), \w -> focus w >> windows W.shiftMaster)

    -- mod-button3, Set the window to floating mode and resize by dragging
    , ((modm, button3), \w -> focus w >> mouseResizeWindow w
                                       >> windows W.shiftMaster)

    -- you may also bind events to the mouse scroll wheel (button4 and button5)
    ]
#+end_src

* Layouts:
You can specify and transform your layouts by modifying these values.
Note that each layout is separated by |||, which denotes layout choice.
** Space between windows
Makes setting the spacingRaw simpler to write. The spacingRaw module adds a configurable amount of space around windows.
#+begin_src haskell
mySpacing :: Integer -> l a -> XMonad.Layout.LayoutModifier.ModifiedLayout Spacing l a
mySpacing i = spacingRaw False (Border i i i i) True (Border i i i i) True

-- Below is a variation of the above except no borders are applied
-- if fewer than two windows. So a single window has no gaps.
mySpacing' :: Integer -> l a -> XMonad.Layout.LayoutModifier.ModifiedLayout Spacing l a
mySpacing' i = spacingRaw True (Border i i i i) True (Border i i i i) True
#+end_src

** The layout function to be called in main
#+begin_src haskell
myLayout
  = renamed [CutWordsLeft 1] $ mySpacing i $ avoidStruts $ smartBorders $ tiled
    ||| floats
    ||| magnifiedTiled
    ||| Mirror tiled
    ||| noBorders Full
  where
    magnifiedTiled = renamed [Replace "Magnified"] $ Mag.magnifiercz' 1.1 basic
    tiled = renamed [Replace "Tiled"] basic
    floats = renamed [Replace "Floats"] $ limitWindows 20 simplestFloat

    -- default tiling algorithm partitions the screen into two panes
    basic = Tall nmaster delta ratio
    -- The default number of windows in the master pane
    nmaster = 1
    -- Default proportion of screen occupied by master pane
    ratio   = 1/2
    -- Percent of screen to increment by when resizing panes
    delta   = 3/100
    -- Border space
    i = 10
#+end_src

* Window rules:
Execute arbitrary actions and WindowSet manipulations when managing a new window. You can use this to, for example, always float a particular program, or have a client always appear on a particular workspace.

To find the property name associated with a program, use ~> xprop | grep WM_CLASS~ and click on the client you're interested in.

To match on the WM_NAME, you can use 'title' in the same way that 'className' and 'resource' are used below.
#+begin_src haskell
myManageHook = composeAll
    [ className =? "MPlayer"        --> doFloat
    -- , className =? "Gimp"           --> doFloat
    , isDialog                      --> doFloat
    , resource  =? "desktop_window" --> doIgnore
    , resource  =? "kdesktop"       --> doIgnore ] <+> insertPosition Master Newer
#+end_src

* Event handling

Defines a custom handler function for X Events. The function should return (All True) if the default handler is to be run afterwards. To combine event hooks use ~mappend~ or ~mconcat~ from Data.Monoid.

#+begin_src haskell
myEventHook = mempty
#+end_src

* Status bars and logging
Perform an arbitrary action on each internal state change or X event.
See the ~XMonad.Hooks.DynamicLog~ extension for examples.
 #+begin_src haskell
myLogHook = return ()
 #+end_src

* Startup hook
Perform an arbitrary action each time xmonad starts or is restarted with mod-q.  Used by, e.g., ~XMonad.Layout.PerWorkspace~ to initialize per-workspace layout choices.
 #+begin_src haskell
myStartupHook :: X ()
myStartupHook = do
  spawnOnce "feh --bg-fill /usr/share/wallpapers/wp1.jpg"  -- feh set random wallpaper
  spawnOnce "xsetroot -cursor_name left_ptr"
  -- spawnOnce "trayer --edge top --align right --SetDockType true --SetPartialStrut true --expand true --width 10 --transparent true --tint 0x5f5f5f --height 18 &"
  -- spawnOnce "xscreensaver -no-splash &"
  -- spawnOnce "nm-applet --sm-disable &"
  spawnOnce "picom &"
  spawnOnce "wal -R"
  spawnOnce "/usr/bin/emacs --daemon"
#+end_src

* Xmobar Config
So that xmobar can communicate to xmonad about the opened windows, workspaces, layoutthemes etc.

** Set colours for xmobar
#+begin_src haskell
blue, lowWhite, magenta, red, white, yellow :: String -> String
magenta  = xmobarColor "#ff79c6" ""
blue     = xmobarColor "#bd93f9" ""
white    = xmobarColor "#f8f8f2" ""
yellow   = xmobarColor "#f1fa8c" ""
red      = xmobarColor "#ff5555" ""
lowWhite = xmobarColor "#bbbbbb" ""
#+end_src

** Xmobar config to be called in main
#+begin_src haskell
myXmobarPP :: PP
myXmobarPP = def
    { ppSep             = magenta " • "
    , ppTitleSanitize   = xmobarStrip
    , ppCurrent         = wrap " " "" . xmobarBorder "Top" color5 2
    , ppHidden          = white . wrap " " ""
    , ppHiddenNoWindows = lowWhite . wrap " " ""
    , ppUrgent          = red . wrap (yellow "!") (yellow "!")
    , ppOrder           = \[ws, l, _, wins] -> [ws, l]
    , ppExtras          = [logTitles formatFocused formatUnfocused]
    }
  where
    formatFocused   = wrap (white    "[") (white    "]") . magenta . ppWindow
    formatUnfocused = wrap (lowWhite "[") (lowWhite "]") . blue    . ppWindow

-- Windows should have *some* title, which should not not exceed a sane length.
ppWindow :: String -> String
ppWindow = xmobarRaw . (\w -> if null w then "Untitled" else w) . shorten 30
#+end_src

* Main function
Now run xmonad with all the defaults we set up.
Run xmonad with the settings specified.
#+begin_src haskell
main = do
  xmonad
    $ ewmhFullscreen
    $ ewmh
    $ withEasySB (statusBarProp ("xmobar " ++ myXmobar) (pure myXmobarPP)) defToggleStrutsKey
    $ docks defaults
#+end_src

** A structure containing configuration settings overriding fields in the default config
Any you don't override, will use the defaults defined in xmonad/XMonad/Config.hs
#+begin_src haskell
defaults = def {
      -- simple stuff
        terminal           = myTerminal,
        focusFollowsMouse  = myFocusFollowsMouse,
        borderWidth        = myBorderWidth,
        modMask            = myModMask,
        -- numlockMask deprecated in 0.9.1
        -- numlockMask        = myNumlockMask,
        workspaces         = myWorkspaces,
        normalBorderColor  = myNormalBorderColor,
        focusedBorderColor = myFocusedBorderColor,

      -- key bindings
      --  keys               = myKeys,
        mouseBindings      = myMouseBindings,

      -- hooks, layouts
        layoutHook         = myLayout,
        manageHook         = myManageHook,
        handleEventHook    = myEventHook,
        logHook            = myLogHook,
        startupHook        = myStartupHook
    } `additionalKeysP` myKeys
#+end_src
